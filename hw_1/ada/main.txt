With Ada.Text_IO; Use Ada.Text_IO;  
With Ada.Integer_Text_IO; Use Ada.Integer_Text_IO;
with Ada.Float_Text_IO; use Ada.Float_Text_IO;

procedure test is
	type Float_Array_Type is array(Integer range <>) of Float;
	Size : Integer;
	procedure Print_Vector (Vector : in out Float_Array_Type; Rows, Columns : in Integer) is
	begin 
	  for I in 0..Rows - 1 Loop
	    for J in 0..Columns - 1 Loop
	      Put (Vector (J + I * Columns));
	      Put (" ");
	    end Loop;
	    New_Line;
	  end Loop;
	  New_Line;
	end Print_Vector;
	
	procedure Init_Matrix (Matr, Rhs : in out Float_Array_Type; Size : Integer) is
	  Sum : Float;
	begin
	Sum := 0.0;
	  for I in 0..Size - 1 Loop
	    for J in 0..Size - 1 Loop
	      Matr(J + I * Size) := Float (abs (I - J)) + 1.0;
	    end Loop;
	  end Loop;
	  
	  for I in 0..Size - 1 Loop
	    for J in 0..Size - 1 Loop
	      Sum := Sum + Matr(J + I * Size);
	    end Loop;
	    Rhs(I) := Sum;
	    Sum := 0.0;
	  end Loop;
	end Init_Matrix;
	
	procedure Gauss_Solver (Matr, X, Rhs: in out Float_Array_Type; Size : in Integer) is
	  Diag, Sum : Float;
	begin
	Sum := 0.0;
	  for I in 0..Size - 1 Loop
	    Diag := Matr (I + I * Size);
	    Rhs (I) := Rhs (I) / Diag;
	    for K in (I + 1)..Size - 1 Loop
	      Matr (K + I * Size) := Matr (K + I * Size) / Diag;
	    end Loop;
	    for J in (I + 1)..Size - 1 Loop
	      for K in (I + 1)..Size - 1 Loop
	        Matr (K + J * Size) := Matr (K + J * Size) - Matr (K + I * Size) * Matr (I + J * Size);
	      end Loop;
	      Rhs (J) := Rhs (J) - Rhs (i) * Matr (I + J * Size);
	    end Loop;
	  end Loop;
	  for I in reverse 0..Size - 1 Loop
	    for J in reverse (I + 1)..Size - 1 Loop
	      Sum := Sum + Matr (J + I * Size) * X (J);
	    end Loop;
	    X(I) := Rhs (I) - Sum;
	    Sum := 0.0;
	  end Loop;
	end Gauss_Solver;
begin

  Get (Size);
  if (Size < 0) then
    return;
  end if;
  declare
    Matr : Float_Array_Type (0..(Size * Size));
    X : Float_Array_Type (0..Size);
    Rhs : Float_Array_Type (0..Size);
    
    begin
      Init_Matrix (Matr, Rhs, Size);
      
      Print_Vector (Matr, Size, Size);
    
      Gauss_Solver (Matr, X, Rhs, Size);
    
      Print_Vector (X, 1, Size);
    end;
  
end test;